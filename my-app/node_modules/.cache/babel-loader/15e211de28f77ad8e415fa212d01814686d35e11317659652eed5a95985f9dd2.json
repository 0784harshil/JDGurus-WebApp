{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prati\\\\Portal\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Login from './Login'; // Default import\nimport Dashboard from './Dashboard'; // Import Dashboard component\nimport Cookies from 'js-cookie'; // Import js-cookie library\nimport Navbar from './Navbar'; // Import Navbar component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // State to manage login status\n\n  useEffect(() => {\n    const loginTime = Cookies.get('loginTime');\n    const currentTime = new Date().getTime();\n    const sessionDuration = 30 * 60 * 1000; // 30 minutes in milliseconds\n\n    // Check if the user is logged in and if the session is still valid\n    if (Cookies.get('isLoggedIn') === 'true' && loginTime) {\n      if (currentTime - parseInt(loginTime) < sessionDuration) {\n        setIsLoggedIn(true); // Session is still valid\n      } else {\n        // Session has expired\n        Cookies.remove('isLoggedIn');\n        Cookies.remove('loginTime');\n      }\n    }\n  }, []);\n  const handleLoginSuccess = () => {\n    setIsLoggedIn(true); // Update login status on successful login\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      isLoggedIn: isLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Login, {\n          onLoginSuccess: handleLoginSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 64\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Navigate","Login","Dashboard","Cookies","Navbar","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","loginTime","get","currentTime","Date","getTime","sessionDuration","parseInt","remove","handleLoginSuccess","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onLoginSuccess","to","_c","$RefreshReg$"],"sources":["C:/Users/prati/Portal/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Login from './Login'; // Default import\nimport Dashboard from './Dashboard'; // Import Dashboard component\nimport Cookies from 'js-cookie'; // Import js-cookie library\nimport Navbar from './Navbar'; // Import Navbar component\n\nfunction App() {\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // State to manage login status\n\n    useEffect(() => {\n        const loginTime = Cookies.get('loginTime');\n        const currentTime = new Date().getTime();\n        const sessionDuration = 30 * 60 * 1000; // 30 minutes in milliseconds\n\n        // Check if the user is logged in and if the session is still valid\n        if (Cookies.get('isLoggedIn') === 'true' && loginTime) {\n            if (currentTime - parseInt(loginTime) < sessionDuration) {\n                setIsLoggedIn(true); // Session is still valid\n            } else {\n                // Session has expired\n                Cookies.remove('isLoggedIn');\n                Cookies.remove('loginTime');\n            }\n        }\n    }, []);\n\n    const handleLoginSuccess = () => {\n        setIsLoggedIn(true); // Update login status on successful login\n    };\n\n    return (\n        <Router>\n            <Navbar isLoggedIn={isLoggedIn} /> {/* Pass isLoggedIn to Navbar */}\n            <Routes>\n                <Route path=\"/\" element={<Login onLoginSuccess={handleLoginSuccess} />} />\n                <Route path=\"/dashboard\" element={isLoggedIn ? <Dashboard /> : <Navigate to=\"/\" />} />\n                {/* Add more routes as needed */}\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAC;AAC7B,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AACrC,OAAOC,OAAO,MAAM,WAAW,CAAC,CAAC;AACjC,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErDC,SAAS,CAAC,MAAM;IACZ,MAAMgB,SAAS,GAAGR,OAAO,CAACS,GAAG,CAAC,WAAW,CAAC;IAC1C,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC,MAAMC,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;IAExC;IACA,IAAIb,OAAO,CAACS,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM,IAAID,SAAS,EAAE;MACnD,IAAIE,WAAW,GAAGI,QAAQ,CAACN,SAAS,CAAC,GAAGK,eAAe,EAAE;QACrDN,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,MAAM;QACH;QACAP,OAAO,CAACe,MAAM,CAAC,YAAY,CAAC;QAC5Bf,OAAO,CAACe,MAAM,CAAC,WAAW,CAAC;MAC/B;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC7BT,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,oBACIJ,OAAA,CAACT,MAAM;IAAAuB,QAAA,gBACHd,OAAA,CAACF,MAAM;MAACK,UAAU,EAAEA;IAAW;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACnClB,OAAA,CAACP,MAAM;MAAAqB,QAAA,gBACHd,OAAA,CAACR,KAAK;QAAC2B,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEpB,OAAA,CAACL,KAAK;UAAC0B,cAAc,EAAER;QAAmB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1ElB,OAAA,CAACR,KAAK;QAAC2B,IAAI,EAAC,YAAY;QAACC,OAAO,EAAEjB,UAAU,gBAAGH,OAAA,CAACJ,SAAS;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGlB,OAAA,CAACN,QAAQ;UAAC4B,EAAE,EAAC;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEjB;AAAChB,EAAA,CAlCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}